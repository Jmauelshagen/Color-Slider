{"version":3,"sources":["ColorSlider.js","ColorOuput.js","App.js","serviceWorker.js","index.js"],"names":["ColorSlider","name","value","changeSlider","styles","backgroundImage","setColor","className","style","htmlFor","type","id","min","max","step","onChange","event","target","ColorOuput","red","green","blue","opacity","rgba","fontColor","Number","backgroundColor","color","ColorBrowser","state","handleChange","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAuCeA,G,MArCK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aAY3BC,EAAS,CACTC,gBAAgB,4CAAD,OAXJ,WACX,OAAQJ,GACJ,IAAK,MAAO,MAAM,OAAN,OAAcC,EAAd,SACZ,IAAK,QAAU,MAAM,SAAN,OAAgBA,EAAhB,OACf,IAAK,OAAS,MAAM,WAAN,OAAkBA,EAAlB,KACd,IAAK,UAAW,MAAM,cAAN,OAAqBA,EAArB,KAChB,QAAU,MAAM,gBAKyCI,GAA9C,MAGnB,MAAa,YAATL,EAEI,yBAAKM,UAAU,SAASC,MAAOJ,GAC3B,2BAAOG,UAAWN,EAAMQ,QAASR,GAAOA,GACxC,2BAAOS,KAAK,QAAQC,GAAIV,EAAMM,UAAWN,EAAMW,IAAI,IAAIC,IAAI,IAAIC,KAAK,MAAMZ,MAAOA,EAAOa,SAAU,SAACC,GAAD,OAAWb,EAAaF,EAAMe,EAAMC,OAAOf,UAC7I,2BAAOK,UAAU,QAAQE,QAASR,GAAOC,IAM7C,yBAAKK,UAAU,SAASC,MAAOJ,GAC3B,2BAAOG,UAAWN,EAAMQ,QAASR,GAAOA,GACxC,2BAAOS,KAAK,QAAQC,GAAIV,EAAMM,UAAWN,EAAMW,IAAI,IAAIC,IAAI,MAAMX,MAAOA,EAAOa,SAAU,SAACC,GAAD,OAAWb,EAAaF,EAAMe,EAAMC,OAAOf,UACpI,2BAAOK,UAAU,QAAQE,QAASR,GAAOC,MCb1CgB,EAjBI,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,IAAIC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,QAE5BC,EAAO,CAACJ,EAAIC,EAAMC,EAAKC,GACvBE,EAAaC,OAAON,GAAOM,OAAOL,GAASK,OAAOJ,IAAU,KAAOI,OAAOH,GAAW,GAAM,QAAU,QAErGlB,EAAS,CACTsB,gBAAgB,QAAD,OAAUH,EAAV,KACfI,MAAOH,GAGX,OACI,yBAAKjB,UAAU,cAAcC,MAAOJ,GAApC,QACUe,EADV,IACgBC,EADhB,IACwBC,EADxB,IAC+BC,EAD/B,MCgEOM,E,2MAvEbC,MAAQ,CACNV,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,QAAS,G,EAGXQ,aAAe,SAAC7B,EAAMC,GACpB,EAAK6B,SAAL,eACG9B,EAAOC,K,wEAYV,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,gBAAd,iBACA,kBAAC,EAAD,CACEN,KAAQ,MACRC,MAAS8B,KAAKH,MAAMV,IACpBhB,aAAc6B,KAAKF,eAErB,kBAAC,EAAD,CACE7B,KAAQ,QACRC,MAAS8B,KAAKH,MAAMT,MACpBjB,aAAc6B,KAAKF,eAErB,kBAAC,EAAD,CACE7B,KAAQ,OACRC,MAAS8B,KAAKH,MAAMR,KACpBlB,aAAc6B,KAAKF,eAErB,kBAAC,EAAD,CACE7B,KAAQ,UACRC,MAAS8B,KAAKH,MAAMP,QACpBnB,aAAc6B,KAAKF,eAErB,kBAAC,EAAD,CAEEX,IAAOa,KAAKH,MAAMV,IAClBC,MAASY,KAAKH,MAAMT,MACpBC,KAAQW,KAAKH,MAAMR,KACnBC,QAAWU,KAAKH,MAAMP,iB,GApDTW,aCOPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.75bfca02.chunk.js","sourcesContent":["import React from 'react';\n\nconst ColorSlider = ({name, value, changeSlider}) => {\n\n    let setColor = ()=>{\n        switch (name){\n            case 'red': return `rgb(${value},0,0)`;\n            case 'green':  return `rgb(0,${value},0)`;\n            case 'blue':  return `rgb(0,0,${value})`;\n            case 'opacity': return `rgba(0,0,0,${value})`\n            default : return `rgb(0,0,0,1)`;\n        }\n    }\n   \n    let styles = {\n        backgroundImage: `linear-gradient(to right, rgba(0,0,0,1), ${setColor()})`\n    };\n\n    if (name === 'opacity'){\n        return (\n            <div className=\"slider\" style={styles}>\n                <label className={name} htmlFor={name}>{name}</label>\n                <input type=\"range\" id={name} className={name} min=\"0\" max=\"1\" step=\".01\" value={value} onChange={(event) => changeSlider(name, event.target.value)}/>\n                <label className=\"white\" htmlFor={name}>{value}</label>\n            </div>\n        );\n    }\n    else{\n        return (\n            <div className=\"slider\" style={styles}>\n                <label className={name} htmlFor={name}>{name}</label>\n                <input type=\"range\" id={name} className={name} min=\"0\" max=\"255\" value={value} onChange={(event) => changeSlider(name, event.target.value)}/>\n                <label className=\"white\" htmlFor={name}>{value}</label>\n            </div>\n        );\n    }\n    \n};\n\nexport default ColorSlider;","import React from 'react';\n\nconst ColorOuput = ({red,green,blue,opacity}) => {\n\n    let rgba = [red,green,blue,opacity]; \n    let fontColor = (Number(red) + Number(green) + Number(blue)) >= 300 && Number(opacity) > 0.5 ? 'black' : 'white' ;\n\n    let styles = {\n        backgroundColor: `rgba(${rgba})`,\n        color: fontColor\n    };\n\n    return (\n        <div className='colorOutput' style={styles}>\n            rgba({red},{green},{blue},{opacity})\n        </div>\n    );\n};\n\nexport default ColorOuput;","import React, { Component } from 'react';\nimport './App.css';\nimport ColorSlider from './ColorSlider';\nimport ColorOutput from './ColorOuput';\n\nclass ColorBrowser extends Component {\n  state = {\n    red: 0,\n    green: 0,\n    blue: 0,\n    opacity: 1\n  }\n\n  handleChange = (name, value) => {\n    this.setState({\n      [name]: value\n    })\n  }\n\n  render() {\n    // let fontColor = (Number(this.state.red) + Number(this.state.green) + Number(this.state.blue)) >= 300 ? 'black' : 'white' ;\n    // let rgba = [this.state.red,this.state.green,this.state.blue,this.state.opacity]; \n    // let rgb = [this.state.red,this.state.green,this.state.blue]; \n    // let styles = {\n    //     backgroundColor: `rgba(${rgba})`,\n    //     color: fontColor\n    // };\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"ColorSlider half-opacity\">\n            <h2 className=\"zero-opacity\">Color Browser</h2>\n            <ColorSlider \n              name = {'red'}\n              value = {this.state.red}\n              changeSlider={this.handleChange}\n              />\n            <ColorSlider\n              name = {'green'}\n              value = {this.state.green}\n              changeSlider={this.handleChange}\n              />\n            <ColorSlider\n              name = {'blue'}\n              value = {this.state.blue}\n              changeSlider={this.handleChange}\n            />\n            <ColorSlider\n              name = {'opacity'}\n              value = {this.state.opacity}\n              changeSlider={this.handleChange}\n            />\n            <ColorOutput\n              // state = {this.state}\n              red = {this.state.red}\n              green = {this.state.green}\n              blue = {this.state.blue}\n              opacity = {this.state.opacity}\n            />\n            {/* \n            <div className='colorOutput' style={styles}>\n              RGB:({this.state.red},{this.state.green},{this.state.blue}) #1\n            </div>\n            <div className='colorOutput' style={{backgroundColor: `rgb(${rgb})`}}>\n              RGB:({this.state.red},{this.state.green},{this.state.blue}) #2\n            </div>\n            <div className='colorOutput' style={{backgroundColor: `rgb(${this.state.red},${this.state.green},${this.state.blue})`}}>\n              RGB:({this.state.red},{this.state.green},{this.state.blue}) #3\n            </div> \n            */}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default ColorBrowser;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}